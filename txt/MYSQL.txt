
1、MYSQL 索引 （B+索引）

   1)	二叉查找树
      首先，让我们先看一张图：https://github.com/zlbonly/simple-go-algorithm/blob/master/pics/mysql_temp1.jpeg
    二叉查找树分析：
       图中的圆为二叉查找树的节点，节点中存储了键（key）和数据 (data)。键对应user表中的id，数据对应user表中的行数据数据。
       二叉查找树的特点就是任何节点的左子节点的键值都小于当前节点的键值，右子节点的键值都大于当前节点的键值。顶端的节点我们称为根节点，没有子节点的节点我们称之为叶节点。

       eg:
       如果我们需要查找 id=12 的用户信息，利用我们创建的二叉查找树索引，查找流程如下：
       将根节点作为当前节点，把 12 与当前节点的键值 10 比较，12 大于 10，接下来我们把当前节点>的右子节点作为当前节点。
       继续把 12 和当前节点的键值 13 比较，发现 12 小于 13，把当前节点的左子节点作为当前节点。
       把 12 和当前节点的键值 12 对比，12 等于 12，满足条件，我们从当前节点中取出 data，即 id=12，name=xm。
       利用二叉查找树我们只需要 3 次即可找到匹配的数据。如果在表中一条条的查找的话，我们需要 6 次才能找到。

    2) 平衡二叉树
        上面我们讲解了利用二叉查找树可以快速的找到数据。但是，如果上面的二叉查找树是这样的构造：
        见图：https://github.com/zlbonly/simple-go-algorithm/blob/master/pics/mysql_temp2.jpeg
        这个时候可以看到我们的二叉查找树变成了一个链表。如果我们需要查找 id=17 的用户信息，我们需要查找 7 次，也就相当于全表扫描了。
        导致这个现象的原因其实是二叉查找树变得不平衡了，也就是高度太高了，从而导致查找效率的不稳定。

        为了解决这个问题，我们需要保证二叉查找树一直保持平衡，就需要用到平衡二叉树了。
        平衡二叉树又称 AVL 树，在满足二叉查找树特性的基础上，要求每个节点的左右子树的高度差不能超过 1。
        如图3。
        https://github.com/zlbonly/simple-go-algorithm/blob/master/pics/mysql_temp3.jpeg

        由平衡二叉树的构造我们可以发现第一张图中的二叉树其实就是一棵平衡二叉树。

        平衡二叉树保证了树的构造是平衡的，当我们插入或删除数据导致不满足平衡二叉树不平衡时，平衡二叉树会进行调整树上的节点来保持平衡。具体的调整方式这里就不介绍了。
        平衡二叉树相比于二叉查找树来说，查找效率更稳定，总体的查找速度也更快。


   3） B树
        因为内存的易失性。一般情况下，我们都会选择将 user 表中的数据和索引存储在磁盘这种外围设备中。
        但是和内存相比，从磁盘中读取数据的速度会慢上百倍千倍甚至万倍，所以，我们应当尽量减少从磁盘中读取数据的次数。
        另外，从磁盘中读取数据时，都是按照磁盘块来读取的，并不是一条一条的读。
        如果我们能把尽量多的数据放进磁盘块中，那一次磁盘读取操作就会读取更多数据，那我们查找数据的时间也会大幅度降低。
        如果我们用树这种数据结构作为索引的数据结构，那我们每查找一次数据就需要从磁盘中读取一个节点，也就是我们说的一个磁盘块。
        我们都知道平衡二叉树可是每个节点只存储一个键值和数据的。那说明什么？说明每个磁盘块仅仅存储一个键值和数据！那如果我们要存储海量的数据呢？
        可以想象到二叉树的节点将会非常多，高度也会极其高，我们查找数据时也会进行很多次磁盘 IO，我们查找数据的效率将会极低！

        如图4：
            https://github.com/zlbonly/simple-go-algorithm/blob/master/pics/mysql_temp4.jpeg

           为了解决平衡二叉树的这个弊端，我们应该寻找一种单个节点可以存储多个键值和数据的平衡树。也就是我们接下来要说的 B 树
           B 树（Balance Tree）即为平衡树的意思，下图即是一棵 B 树：
           如图5： https://github.com/zlbonly/simple-go-algorithm/blob/master/pics/mysql_temp5.jpeg

         图中的 p 节点为指向子节点的指针，二叉查找树和平衡二叉树其实也有，因为图的美观性，被省略了。

         图中的每个节点称为页，页就是我们上面说的磁盘块，在 MySQL 中数据读取的基本单位都是页，所以我们这里叫做页更符合 MySQL 中索引的底层数据结构。

         从上图可以看出，B 树相对于平衡二叉树，每个节点存储了更多的键值（key）和数据（data），并且每个节点拥有更多的子节点，子节点的个数一般称为阶，上述图中的 B 树为 3 阶 B 树，高度也会很低。
         基于这个特性，B 树查找数据读取磁盘的次数将会很少，数据的查找效率也会比平衡二叉树高很多。
         eg:
         假如我们要查找 id=28 的用户信息，那么我们在上图 B 树中查找的流程如下：
         先找到根节点也就是页 1，判断 28 在键值 17 和 35 之间，那么我们根据页 1 中的指针 p2 找到页 3。
         将 28 和页 3 中的键值相比较，28 在 26 和 30 之间，我们根据页 3 中的指针 p2 找到页 8。
         将 28 和页 8 中的键值相比较，发现有匹配的键值 28，键值 28 对应的用户信息为（28，bv）


    4) B+ 树
            B+ 树是对 B 树的进一步优化。让我们先来看下 B+ 树的结构图：
            如图6：https://github.com/zlbonly/simple-go-algorithm/blob/master/pics/mysql_temp6.jpeg


       根据上图我们来看下 B+ 树和 B 树有什么不同：

       ①B+ 树非叶子节点上是不存储数据的，仅存储键值，而 B 树节点中不仅存储键值，也会存储数据。

       之所以这么做是因为在数据库中页的大小是固定的，InnoDB 中页的默认大小是 16KB。

       如果不存储数据，那么就会存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树就会更矮更胖，如此一来我们查找数据进行磁盘的 IO 次数又会再次减少，数据查询的效率也会更快。

       另外，B+ 树的阶数是等于键值的数量的，如果我们的 B+ 树一个节点可以存储 1000 个键值，那么 3 层 B+ 树可以存储 1000×1000×1000=10 亿个数据。

       一般根节点是常驻内存的，所以一般我们查找 10 亿数据，只需要 2 次磁盘 IO。

       ②因为 B+ 树索引的所有数据均存储在叶子节点，而且数据是按照顺序排列的。

       那么 B+ 树使得范围查找，排序查找，分组查找以及去重查找变得异常简单。而 B 树因为数据分散在各个节点，要实现这一点是很不容易的。

       有心的读者可能还发现上图 B+ 树中各个页之间是通过双向链表连接的，叶子节点中的数据是通过单向链表连接的。

       其实上面的 B 树我们也可以对各个节点加上链表。这些不是它们之前的区别，是因为在 MySQL 的 InnoDB 存储引擎中，索引就是这样存储的。

       也就是说上图中的 B+ 树索引就是 InnoDB 中 B+ 树索引真正的实现方式，准确的说应该是聚集索引（聚集索引和非聚集索引下面会讲到）。

       通过上图可以看到，在 InnoDB 中，我们通过数据页之间通过双向链表连接以及叶子节点中数据之间通过单向链表连接的方式可以找到表中所有的数据。

       MyISAM 中的 B+ 树索引实现与 InnoDB 中的略有不同。在 MyISAM 中，B+ 树索引的叶子节点并不存储数据，而是存储数据的文件地址。


    二、聚集索引 VS 非聚集索引
    在上节介绍 B+ 树索引的时候，我们提到了图中的索引其实是聚集索引的实现方式。

    那什么是聚集索引呢？在 MySQL 中，B+ 树索引按照存储方式的不同分为聚集索引和非聚集索引。

    这里我们着重介绍 InnoDB 中的聚集索引和非聚集索引：

    ①聚集索引（聚簇索引）：以 InnoDB 作为存储引擎的表，表中的数据都会有一个主键，即使你不创建主键，系统也会帮你创建一个隐式的主键。

    这是因为 InnoDB 是把数据存放在 B+ 树中的，而 B+ 树的键值就是主键，在 B+ 树的叶子节点中，存储了表中所有的数据。

    这种以主键作为 B+ 树索引的键值而构建的 B+ 树索引，我们称之为聚集索引。

    ②非聚集索引（非聚簇索引）：以主键以外的列值作为键值构建的 B+ 树索引，我们称之为非聚集索引。

    非聚集索引与聚集索引的区别在于非聚集索引的叶子节点不存储表中的数据，而是存储该列对应的主键，想要查找数据我们还需要根据主键再去聚集索引中进行查找，这个再根据聚集索引查找数据的过程，我们称为回表。

    明白了聚集索引和非聚集索引的定义，我们应该明白这样一句话：数据即索引，索引即数据。


参考连接：   http://www.liuzk.com/410.html