1、三方登录原理 和 Oauth
	1、三方登录流程
		举例来说，A 网站允许 GitHub 登录，背后就是下面的流程。
		1、A 网站让用户跳转到 GitHub,并指定回调地址。
		2、GitHub 要求用户登录，然后询问"A 网站要求获得 xx 权限，你是否同意？"
		3、用户同意，GitHub 就会重定向回 A 网站，同时发回一个授权码(authorize_code)。
		4、A 网站使用授权码，向 GitHub 请求令牌(accessToken)。
		5、GitHub 返回令牌.
		6、A 网站使用令牌，向 GitHub 请求用户数据。

	  说明：需要在三方平台注册开发者账号，并获取分配的appId和Secret。整个流程遵循Oauth2.0协议


	 2、三方登录流程是基于Oauth2.0的授权码模式
	 	1、授权码模式(authorization code)： 流程最完整和严密的一种授权方式，服务器和客户端配合使用，主要是针对web服务器的情况采用。
	 		参考（1）
	 	2、户端以自己的名义，而不是用户的名义，向“服务提供商”进行认证，如微信公众号以此access_token来拉取所有已关注用户的信息，docker到dockerhub拉取镜像等

	 		客户端模式，顾名思义就是指客户端以自己的名义而不是用户的名义去向服务的提供商去做一个认证，严格来说，这种模式并不是 oAuth 框架要解决的问题，在这种客户端模式下呢，它是直接通过客户端的密钥和id去获取一个access_token的，不需要用户去参与.


2、单点登录

	概念：在多个系统中，用户只需要登录一次，各个系统即可感知当前用户已经登录
	没有接触过现实的情况但是 有了解过：例如 在网页上登录 淘宝和天猫

	单点登录主要分为两种
	1、同父域名下的单点登录解决方案
		例如： hr.oa.com，km.oa.com，fuli.oa.com
			第一种是同一父域下的单点登录，比如说hr.oa.com，km.oa.com，fuli.oa.com，那这种情况就可以通过将domain属性设置为二级域名oa.com来共享cookie，然后服务端通过用JWT这种方式 公用同一个token实现。

	2、 不同域名下的单点登录解决方案
		例如	： taobao.com 和 tmall.com

		比如说淘宝和天猫，它的二级域名是不相同的。这种情况，就要解决cookie不共享的问题。现在主流的方案就是使用cas来实现。

		CAS的几个重要知识点

		1. TGT (Ticket Grangting Ticket) :
			 TGT 是 CAS 为用户签发的登录票据，拥有了 TGT，用户就可以证明自己在 CAS 成功登录过。TGT 封装了 Cookie 值以及此 Cookie 值对应的用户信息。

		2.TGC(Ticket Granting Cookie) :

		     CAS Server 生成TGT放入自己的 Session 中，而 TGC 就是这个 Session 的唯一标识（SessionId），以 Cookie 形式放到浏览器端。

		3.ST(Service Ticket) :

		     ST 是 CAS 为用户签发的访问某一 service 的票据。用户访问 service 时，service 发现用户没有 ST，则要求用户去 CAS 获取 ST。


	 	跨域SSO（CAS）实现过程：
				1、用户访问产品 a，域名是 http://www.a.cn。
				2、由于用户没有携带在 a 服务器上登录的 a cookie，所以 a 服务器重定向到SSO 服务器的地址。
				3、由于用户没有携带在 SSO 服务器上登录的 TGC，所以 SSO 服务器判断用户未登录，给用户显示统一登录界面。
				4、登录成功后，SSO 服务器构建用户在 SSO 登录的 TGT，同时返回一个 http 重定向（包含 sso 服务器派发的 ST ）。
				5、重定向的 http response 中包含写 cookie。这个 cookie 代表用户在 SSO 中的登录状态，它的值是 TGC。
				6、浏览器重定向到产品 a。此时重定向的 url 中携带着 SSO 服务器生成的 ST。根据 ST，a 服务器向 SSO 服务器发送请求，SSO 服务器验证票据的有效性。验证成功后，a 服务器知道用户已经在 sso 登录了，于是 a 服务器构建用户登录 session。
				7、用户访问产品 b，域名是 http://www.b.cn。
				8、由于用户没有携带在 b 服务器上登录的 b cookie，所以 b 服务器重定向到SSO 服务器，去询问用户在 SSO 中的登录状态。
				9、浏览器重定向到 SSO服务器。
				10、由于已经向浏览器写入了携带 TGC 的cookie，所以此时 SSO 服务器可以拿到，根据 TGC 去查找 TGT，如果找到，就判断用户已经在 sso 登录过了。
				11、浏览器带 ST 重定向到 b 服务器。
				12、b 服务器根据票据向 SSO 服务器发送请求，票据验证通过后，b 服务器知道用户已经在 sso 登录了，于是生成 b session，向浏览器写入 b cookie。

		参考流程图：
			https://pic3.zhimg.com/80/v2-a60ca019f6793f524b3a30f24be47ca2_1440w.jpg

3、传统登录 Session 和 JWT比较
    HTTP是无状态的。所有请求都是无状态的。
    但是，在某些情况下，我们希望记住我们的状态。例如，在一家在线商店中，当我们将香蕉放入购物车后，我们不希望我们的香蕉在转到另一页上购买苹果时消失。
    IE。我们希望在浏览网上商店时记住我们的购买状态！
    为了克服HTTP请求的无状态本质，我们可以使用session或token。

   1、基于session的身份验证（cookie + session）
        基于认证的session，服务器将在用户登录之后创建session，然后sessionID存储在用户的浏览器的cookie。
        当用户保持登录状态时，Cookie将与每个后续请求一起发送。然后，服务器可以将Cookie中存储的sessionID与内存中存储的session信息进行比较，以验证用户的身份并发送具有相应状态的响应！
           基于session的验证流程参考图：
           https://github.com/zlbonly/simple-go-algorithm/blob/master/pics/session-png.jpg

        缺点：
            1、基于cookie + session的机制很容易被CSRF
            2、如果是分布式部署，需要做多机共享session机制，实现方法可将session存储到数据库中或者redis中

           
   2、基于token的身份验证
            许多Web应用程序使用JSON Web token（JWT）代替用于身份验证的session。
            在基于token的应用程序中，服务器使用机密创建JWT，并将JWT发送到客户端。
            客户端存储JWT（通常在本地存储中），并在每个请求的标头中都包含JWT。然后，服务器将使用来自客户端的每个请求来验证JWT并发送响应。

         基于token的身份验证流程如图：
          https://github.com/zlbonly/simple-go-algorithm/blob/master/pics/jwt-png.jpg

            这里最大的区别是用户状态没有存储在服务器上，而是状态存储在客户端的token内。
            大多数现代Web应用程序都使用JWT进行身份验证，因为他的可扩展性和移动设备身份验证

            优点：
            JWT验证，由于服务端不保存用户信息，不用做sessonid复制，这样集群水平扩展就变得容易了。同时用户发请求给服务端时，
            前端使用JS将JWT放在header中手动发送给服务端，服务端验证header中的JWT字段，而非cookie信息，这样就避免了CSRF漏洞攻击

   3、CSRF攻击和预防
        Demo:
            1、用户访问A网站(http://www.aaa.com)，输入用户名密码

            2、服务器验证通过，生成sessionid并返回给客户端存入cookie

            3、用户在没有退出或者没有关闭A网站，cookie还未过期的情况下访问恶意网站B

            4、B网站返回含有如下代码的html：

            5、/假设A网站注销用户的url为：https://www.aaa.com/delete_user
            <img src="https://www.aaa.com/delete_user" style="display:none;"/>
            6、浏览器发起对A网站的请求，并带上A网站的cookie，注销了用户

      防护：
            1、校验请求中Referer
            2、Header中新增Token，校验Token签名。

      XSS攻击防护：
        1、客户端和服务器端都应该对提交数据进行xss过滤，对html进行转义
        2、禁止执行不信任的脚本。

    4、JWT原理
        JWT 全称 JSON Web Tokens ，是一种规范化的 token
        1、组成
            一个 JWT token 是一个字符串，它由三部分组成，头部、载荷与签名，中间用 . 分隔，
            例如：xxxxx.yyyyy.zzzzz
            1、头部（header）#
                头部通常由两部分组成：令牌的类型（即 JWT）和正在使用的签名算法（如 HMAC SHA256 或 RSA.）。
                例如：
                {
                  "alg": "HS256",
                  "typ": "JWT"
                }
                然后用 Base64Url 编码得到头部，即 xxxxx。
            2、载荷（Payload）
                载荷中放置了 token 的一些基本信息，以帮助接受它的服务器来理解这个 token。同时还可以包含一些自定义的信息，用户信息交换。
                载荷的属性也分三类：
                预定义（Registered）
                公有（public）
                私有（private）
             这里面的前 7 个字段都是由官方所定义的，也就是预定义（Registered claims）的，并不都是必需的。
                iss (issuer)：签发人
                sub (subject)：主题
                aud (audience)：受众
                exp (expiration time)：过期时间
                nbf (Not Before)：生效时间，在此之前是无效的
                iat (Issued At)：签发时间
                jti (JWT ID)：编号

            3、签名（Signature）#
                签名时需要用到前面编码过的两个字符串，如果以 HMACSHA256 加密，就如下：
                HMACSHA256(
                    base64UrlEncode(header) + "." +
                    base64UrlEncode(payload),
                    secret
                )
        加密后再进行 base64url 编码最后得到的字符串就是 token 的第三部分 zzzzz。
        组合便可以得到 token：xxxxx.yyyyy.zzzzz。
        签名的作用：保证 JWT 没有被篡改过，原理如下：

            HMAC 算法是不可逆算法，类似 MD5 和 hash ，但多一个密钥，密钥（即上面的 secret）由服务端持有，客户端把 token 发给服务端后，
            服务端可以把其中的头部和载荷再加上事先共享的 secret 再进行一次 HMAC 加密，得到的结果和 token 的第三段进行对比，


    5、JWT续约


1.用户登录生成token
	设置JWT  结构参见 （JWT 载荷Payload 结构）
2.鉴权：
	* 非法验证,查询本地缓存的黑名单token（15天过期），存在则重新登录
	* 解析token
		1） token 解析失败
			# 解析失败,保存到本地缓存黑名单中
		2） token 解析成功
			-- token 不在有效期内
				# 小于发布日期,保存到本地缓存黑名单中
				# 大于过期时间,保存到本地缓存黑名单中,重新登录
			-- token 有效
				# 当前时间 不在 token刷新宽限期，api 正常相应
				# 当前时间 在 token刷新宽限期，
				 	所有api 正常相应，同时生成新的token，通过header 返回。 对于同一个旧token,新token只生成一次，
				 	接下来所有旧token的请求 ，直接返回宽限期内生成的第一个新token(使用redis 维护旧token和新生成的token，并添加锁 防止并发)，并调用go 服务 过期 旧token （需要go提供一个过期接口）



说明grace 作用
当Token刷新后，将旧Token加入黑名单，此时返回了新的Token。

当下一个并发请求到来时，此时携带的还是旧的Token，而且此Token已经被加入黑名单。不过我可以获取到此Token中的GraceTime（宽限时间），然后取出这个已经加入黑名单Token，获得其加入黑名单的开始时间，做一个差值计算。

如果 now < graceTime + startTime，则认为Token是有效的。