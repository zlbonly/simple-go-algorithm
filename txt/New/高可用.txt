1、高可用的定义
	高可用是描述一个系统在大部分时间都是可用的，可以为我们提供稳定的服务，高可用代表系统即使在发生硬件或者系统升级的时候，
	系统依然是可用的。

2、哪些情况会导致系统不可用
	1、黑客攻击
	2、硬件故障
	3、并发量&用户请求量激增导致整个服务宕掉或者部分服务不可用
	4、网站架构中某个重要的角色比如Nginx或者数据库突然不可用
	5、自然灾害或者人为故障

	。。。。。。

3、有哪些提高系统高可用性的方法？

	1 使用集群 减少单点故障
		先拿常用的 Redis 举个例子！我们如何保证我们的 Redis 缓存高可用呢？答案就是使用集群，避免单点故障。当我们使用一个 Redis 实例作为缓存的时候，这个 Redis 实例挂了之后，整个缓存服务可能就挂了。使用了集群之后，即使一台 Redis 实例，不到一秒就会有另外一台 Redis 实例顶上

	2、限流
		流量控制（flow control），其原理是监控应用流量的 QPS 或并发线程数等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性

	3、超时和重试机制设置

		一旦用户请求超过某个时间的得不到响应，就抛出异常。这个是非常重要的，很多线上系统故障都是因为没有进行超时设置或者超时设置的方式不对导致的。我们在读取第三方服务的时候，尤其适合设置超时和重试机制。一般我们使用一些 RPC  框架的时候，这些框架都自带的超时重试的配置。如果不进行超时设置可能会导致请求响应速度慢，甚至导致请求堆积进而让系统无法在处理请求。重试的次数一般设为3次，再多次的重试没有好处，反而会加重服务器压力（部分场景使用失败重试机制会不太适合）。

	4、熔断机制
		超时和重试机制设置之外，熔断机制也是很重要的。熔断机制说的是系统自动收集所依赖服务的资源使用情况和性能指标，当所依赖的服务恶化或者调用失败次数达到某个阈值的时候就迅速失败，让当前系统立即切换依赖其他备用服务。比较常用的是流量控制和熔断降级框架是 Netflix 的 Hystrix 和 alibaba 的 Sentinel。

	5、异步调用
		异步调用的话我们不需要关心最后的结果，这样我们就可以用户请求完成之后就立即返回结果，具体处理我们可以后续再做，秒杀场景用这个还是蛮多的。但是，使用异步之后我们可能需要 适当修改业务流程进行配合，比如用户在提交订单之后，不能立即返回用户订单提交成功，需要在消息队列的订单消费者进程真正处理完该订单之后，甚至出库后，再通过电子邮件或短信通知用户订单成功。除了可以在程序中实现异步之外，我们常常还使用消息队列，消息队列可以通过异步处理提高系统性能（削峰、减少响应所需时间）并且可以降低系统耦合性

	6、使用缓存
		如果我们的系统属于并发量比较高的话，如果我们单纯使用数据库的话，当大量请求直接落到数据库可能数据库就会直接挂掉。使用缓存缓存热点数据，因为缓存存储在内存中，所以速度相当地快！
	7、其他
		1、核心应用和服务优先使用更好的硬件
		2、监控系统资源使用情况增加报警设置。
		3、注意备份，必要时候回滚。
		4、灰度发布： 将服务器集群分成若干部分，每天只发布一部分机器，观察运行稳定没有故障，第二天继续发布一部分机器，持续几天才把整个集群全部发布完毕，期间如果发现问题，只需要回滚已发布的一部分服务器即可

		例如我们线上 room hive 服务上线时，就是先把线上40% 的流量 打到hive服务上，待稳定后，在放80%的流量，最后100%

		参考链接：https://cloud.tencent.com/developer/article/1538969?from=article.detail.1624636
