二、 分布式锁

    分布式锁应具备以下特点：
    1、互斥性：在任意时刻，只有一个客户端（进程）能持有锁
    2、安全性：避免死锁，当进程没有主动释放锁（进程崩溃退出），保证其他进程能够加锁。
    3、容错性：只要多数redis节点（一半以上）在使用，client就可以获取和释放锁
    4、对称性：对于同一个锁，加锁和解锁必须是同一个进程，即不能把其他进程持有的锁给释放了。


   2.1 基于redis实现分布式锁
   1、 我们使用redis的 SETNX  实现分布式锁。具体的做法是后端收到一个请求后加入个分布式锁，如果加锁成功，就执行业务，
   如果加锁失败就等待或者拒绝请求。业务执行完成后释放锁。
       setnx 设置成功返回1，设置失败返回0
       1、为了避免客户端挂了导致死锁，可以在setnx 中设置过期时间。
       2、为了保证设置锁和设置锁过期时间的原子性，可以采用lua脚本。（Redis 服务器会单线程原子性执行 lua 脚本，保证 lua 脚本在处理的过程中不会被任意其它请求打断）

   2、1中存在问题。设置了过期时间，如果业务还没有完成，但是redis锁过期了，怎么办？
       1、方案一。使用watchDog对锁进行续约。
            当客户端加锁成功后，可以启动一个定时任务，每隔10s(最好支持配置)来检测业务是否处理完成，检测的依据就是判断分布式锁的key是否还存在，如果存在，就进行续约。
            Redisson就是这个实现方案。
       2、如果当前线程已经处理完，这个key是被其他客户端写入的呢？
            可以为每个客户端指定一个clientID，在VALUE中增加一个clientID的前缀，这样在续锁的时候，可以判断当前分布式锁的value前缀来确定是不是当前客户端的，如果是再续锁，否则不做处理
        我们用的redisson的分布式锁方案，使用redisson获取分布式锁非常简单

      3、面试官：如果client1宕机了，这时分布式锁还可以续期吗？
            因为分布式锁的续期是在客户端执行的，所以如果client1宕机了，续期线程就不能工作了，也就不能续期了。这时应该把分布式锁删除，让其他客户端来获取。
      4、因为分布式锁的续期是在客户端执行的，所以如果client1宕机了，续期线程就不能工作了，也就不能续期了。这时应该把分布式锁删除，让其他客户端来获取。
            因为client1宕机了，只能等到超时时间后锁被自动删除。如果要立刻删除，需要增加额外的工作，比如增加哨兵机制，让哨兵来维护所有redis客户端的列表。
            哨兵定时监控客户端是否宕机，如果检测到宕机，立刻删除这个客户端的锁。

           ！！ 这里的哨兵并不是redis的哨兵，而且为了检测客户端故障业务系统自己做的哨兵。



   2.2 以上策略都是单机Redis实现分布式锁，如果redis集群Master-slave会存在安全性问题：
        	例如：
        		 1、客户端1 从Master获取了锁
        		 2、Master宕机了，存储锁的key还没有来得及同步到Slave上
        		 3、Slave升级为Master
        		 4、客户端2从新的Master获取到了对应同一个资源的锁
        		 于是，客户端1和客户端2同时持有了同一个资源的锁，锁的安全型被打破


        针对redis集群多服务实例场景，可以使用Redlock算法
        可以参考Redisson实现分布式锁，Redis官方提供的分布式锁组件，内部使用了ReadLock算法。
       go的redsync包实现了redlock算法。（https://github.com/go-redsync/redsync）

        	ReadLock红锁算法：
        	1、获得当前时间（ms）

			2、首先设置一个锁有效时间valid_time，也就是超过这个时间后锁自动释放，使用相同的key和value对所有redis实例进行设置，每次链接redis实例时设置一个小于valid_time的超时时间，比如valid_time时10s，那超时时间可以设置成50ms，如果这个实例不行，那么换下一个设置

			3、计算获取锁总共占用的时间，再加上时钟偏移，如果这个总时间小于valid_time，并且成功设置锁的实例数>= N/2 + 1，那么加锁成功

			4、如果加锁成功了，那么这个锁的有效时间就是valid_time - 获取锁占用的时间 - 时钟偏移

			5、如果加锁失败，解锁所有实例（每个redis实例都运行del key）


	缺点： 自认为 只适用单实例的redis分布式锁，如果存在redis集群（主从集群，cluster集群）等，可能会存在问题（例如，master 突然挂掉，缓存key 还没有来得及同步到slave）,redis官方适用redlock算法来解决。参考java 封装的redission

	redlock算法 大致：

	公司量级不够，目前redis仅一台服务器，单实例配置，只有需要同步数据的才 进行主从配置。（一主多从）

	2.2、基于数据库悲观锁（for update） 但是存在性能问题。（用的少）

	2.3、基于etcd

        1、etcd 支持以下功能，正是依赖这些功能来实现分布式锁的：

          1、Lease 机制：即租约机制（TTL，Time To Live），Etcd 可以为存储的 KV 对设置租约，当租约到期，KV 将失效删除；同时也支持续约，即 KeepAlive。
          2、Revision 机制：每个 key 带有一个 Revision 属性值，etcd 每进行一次事务对应的全局 Revision 值都会加一，
                因此每个 key 对应的 Revision 属性值都是全局唯一的。通过比较 Revision 的大小就可以知道进行写操作的顺序。
                在实现分布式锁时，多个程序同时抢锁，根据 Revision 值大小依次获得锁，可以避免 “羊群效应”（也称 “惊群效应”
                 假如许多客户端在等待一把锁，当锁释放时候所有客户端都被唤醒，仅仅有一个客户端得到锁。），实现公平锁。
          3、Prefix 机制：即前缀机制，也称目录机制。可以根据前缀（目录）获取该目录下所有的 key 及对应的属性（包括 key, value 以及 revision 等）。
          4、Watch 机制：即监听机制，Watch 机制支持 Watch 某个固定的 key，也支持 Watch 一个目录（前缀机制），当被 Watch 的 key 或目录发生变化，客户端将收到通知。

	        1、etcd 实现分布式锁 大致流程:
        	 		1、先检查/lock路径下是否有值，如果有值，说明锁已经被占用了，
        	 		2、如果没有值，写入自己的值。写入成功返回，说明加锁成功，如果写入时节点被其他节点写入过了，那么会导致加锁失败
        	 		，跳到第三步
        	 		3、监视/lock 下的时间，先入zuse
        	 		4、当/lock路径下发生事件时，当前进程被唤醒，检查发生的时间是否是删除事件（说明锁持有着主动解锁） 或者过期事件
        	 		(说明锁过期失效) 如果是的话，那么回到1，走抢锁流程。

        	 		etcd v3 api 官方已经提供了可直接使用的锁 API
        	 	 参考： https://github.com/zieckey/etcdsync/blob/master/mutex.go 实现：

        	 	 demo :使用上，跟 Golang 官方 sync 包的 Mutex 接口非常类似，先New()，然后调用Lock()，使用完后调用Unlock()，

        		 	 func main() {
        		//etcdsync.SetDebug(true)
        		log.SetFlags(log.Ldate|log.Ltime|log.Lshortfile)
        		m := etcdsync.New("/etcdsync", "123", []string{"http://127.0.0.1:2379"})
        		if m == nil {
        		log.Printf("etcdsync.NewMutex failed")
        		}
        		err := m.Lock()
        		if err != nil {
        		log.Printf("etcdsync.Lock failed")
        		} else {
        		log.Printf("etcdsync.Lock OK")
        		}

        		log.Printf("Get the lock. Do something here.")

        		err = m.Unlock()
        		if err != nil {
        		log.Printf("etcdsync.Unlock failed")
        		} else {
        			log.Printf("etcdsync.Unlock OK")
        		}
        	}

    2.3 通过数据库方式实现：采用乐观锁、悲观锁或者基于主键唯一约束实现




