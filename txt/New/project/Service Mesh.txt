
1、项目中 服务注册，服务发现，负载均衡 实现。
    1、项目部署方案。。
		基于k8s+istio 的 Service Mesh服务网格的方式部署。通过sidecar模式，在K8S的Pod结点中，同时部署go微服实例容器和代理容器。
		简单理解成（在 Kubernetes 的 Pod 中，在原有的应用容器旁边运行一个 Sidecar 容器，可以理解为两个容器共享存储、网络等资源。但是Sidecar 代理接管进出应用容器的所有流量）.

	2、服务注册
		 1、使用consul实现服务注册。在服务启动的时候，将服务的信息注册到consul服务中。
         2、在 Istio 控制面中，Pilot 组件负责管理服务网格内部的服务和流量策略。pilot-discovery服务 集成和适配consul注册表中的服务和服务实例，并 将服务信息和路由策略转换为 xDS 接口的标准数据结构，推送下发到数据面的 Envoy。

	3、服务发现和负载均衡
		1、Service mesh 的数据平面 Envoy 组件，通过调用Pilot服务提供的xDS API 动态的获取部署的服务实例列表.
		2、K8S 会为每一个Service 分配一个虚拟的ClusterIP 集群IP,并且k8s将Service的名称当做域名注册到kube-dns中。
		3、envoy proxy 代理监听请求的域名和端口，并通过kube-dns 解析获取具体的服务ip.
		4、envoy根据配置的负载均衡策略（通常是round_robin 轮询）选择服务实例，并连接对应的实例地址。


	4、Service Mesh 服务网格部署方案的优点。
		1、将业务逻辑和服务治理逻辑分层和解耦，减少对业务代码的侵入。
		2、与语言无关，可以对分布式的微服务集中治理。



	5、另外service Mesh 很方便进行遥测信息的收集
	    1、目前项目中使用 Prometheus + Grafana 也是实现监控报警。
	    2、Jeager实现实现的分布式链路追踪（在服务中通过grpc拦截器，埋入请求，在k8s部署Jeager服务）
	    3、目前缺少日志收集，未来考虑Fluent Bit 是针对 Kubernetes 用 C 语言重现的 Fluentd。它针对 Kubernetes 做了很多优化。
            再配合 Elasticsearch/Mongodb，可以基本满足我们对日志搜集的需求

 	参考链接：
 		1、https://www.servicemesher.com/istio-handbook/practice/prometheus.html
 		2、http://dockone.io/article/10829
 		3、https://www.cnblogs.com/163yun/p/8962278.html

2、线上项目的整体的架构（php-golang)

	举例分析：web restful api  -> php  - > grpc -> go微服务

    1、 例如 resuful api  的借口 live.qq.com/api/index  =》 php
        1、首先通过 dns解析，获取 live.qq.com 对应的ip地址，根据ip地址 找到 nginx反向代理服务器。
        2、nginx 代理服务器，通过轮询的策略进行负载均衡，将请求转发到 部署的php 服务器。

    2、php 中 发起 grpc 调用 请求 -》 go微服务。
        1、以房间服务为例子 room.srv.qie.tv rpc服务地址。
            rpc服务的地址。命名的规则 =》 服务名.srv.qie.tv(k8s集群的service名)
            调用room.srv.qie.tv时，根据配置的host域名访问方式，进行请求。 并且在内网中劫持room.srv.qie.tv的请求，
            将请求转发到 k8s集群对应的pod中。
        2、边车的envoy-proxy 代理 根据负载均衡策略。将具体的请求，转发到 pod中的服务实例中。