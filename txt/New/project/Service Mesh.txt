1、目前项目的架构流程，负载均衡，服务注册，服务发现流程.

1、项目中 服务注册，服务发现，负载均衡 实现。

举例子：room服务 在k8s中，采用的是service Mesh 服务网格的部署方式。

		1、将每个服务的docker实例，以sidecar 边车的模式，注入到k8s的pod节点中。简单理解成（在 Kubernetes 的 Pod 中，在原有的应用容器旁边运行一个 Sidecar 容器，可以理解为两个容器共享存储、网络等资源。但是Sidecar 代理接管进出应用容器的所有流量）

		2、Service Mesh 的边车模式是通过Istio实现的。
			1、Istio 的架构由两部分组成，分别是数据平面（Data Plane）和控制平面（Control Plane）
				1、Control Panel（控制平面）：负责数据下发，如服务/服务实例数据、服务治理配置数据。envoy
				2、Data Panel（数据平面）：高性能Proxy负责具体的流量治理。 主要的组件为Pilot


		3、服务注册和服务发现
			1、使用consul实现服务注册。在服务启动的时候，将服务的信息注册到consul服务中。

			2、在 Istio 控制面中，Pilot 组件负责管理服务网格内部的服务和流量策略。pilot-discovery 集成和适配consul注册表中的服务和服务实例，并 将服务信息和路由策略转换为 xDS 接口的标准数据结构，推送下发到数据面的 Envoy。

			3、数据层面 envoy的动态配置 适配 通过xDs-api获取Pilot下发的服务信息，完成服务发现。并在配置文件中
				制定round_bin轮询的的负载均衡策略。



		4、另外pilot中通过配置Prometheus 和 Grafana 实现监控报警
		   通过配置 Jaeger 实现链路追踪。
		   目前缺少日志收集。 目前的日志都记录在了每天产生具体的文件中，未来考虑 介入

 	参考链接：
 		1、https://www.servicemesher.com/istio-handbook/practice/prometheus.html
 		2、http://dockone.io/article/10829
 		3、https://www.cnblogs.com/163yun/p/8962278.html

2、线上项目的整体的架构（php-golang)

	举例分析：web restful api  -> php  - > grpc -> go微服务

1、 例如 resuful api  的借口 live.qq.com/api/index  =》 php
	1、首先通过 dns解析，获取 live.qq.com 对应的ip地址，根据ip地址 找到 nginx反向代理服务器。
	2、nginx 代理服务器，通过轮询的策略进行负载均衡，将请求转发到 部署的php 服务器。

2、php 中 发起 grpc 调用 请求 -》 go微服务。
	1、以房间服务为例子 room.srv.qie.tv rpc服务地址。
		rpc服务的地址。命名的规则 =》 服务名.srv.qie.tv(k8s集群的service名)
		调用room.srv.qie.tv时，根据配置的host域名访问方式，进行请求。 并且在内网中劫持room.srv.qie.tv的请求，
		将请求转发到 k8s集群对应的pod中。
	2、边车的envoy-proxy 代理 根据负载均衡策略。将具体的请求，转发到 pod中的实例中。