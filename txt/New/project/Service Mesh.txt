1、后K8S时代 ，使用Docker Compose 搭建Service Mesh
	1、Service Mesh 架构 和微服务
		1、微服务 (Microservices) 是一种软件架构风格，它是以专注于单一责任与功能的小型功能区块 (Small Building Blocks) 为基础，利用模块化的方式组合出复杂的大型应用程序，各功能区块使用与语言无关 (Language-Independent/Language agnostic) 的 API 集相互通信

		2、服务网格（Service Mesh）是用于处理服务间通信的专用基础设施层。它负责通过包含现代云原生应用程序的复杂服务拓扑来可靠地传递请求。实际上，服务网格通常通过一组轻量级网络代理来实现，这些代理与应用程序代码一起部署，而不需要感知应用程序本身


	2、微服务架构常见需要的功能有
		1、微服务需要通过相互调用来完成原先单体大服务所实现的功能，这其中就涉及到相关的网络通信，以及网络通信带来的请求的序列化、响应的反序列化。
		2、服务间的相互调用涉及服务发现。
		3、分布式的架构可能需要不同的流量治理策略来保证服务之间相互调用的稳定性。
		4、微服务架构下还需要提升可观测性能力，包括日志、监控、Tracing 等。

	3、当前微服务架构存在的问题
		1、在微服务架构中，通常除了实现业务功能的微服务外，我们还会部署一系列的基础组件。这些基础组件有些会入侵微服务的代码。
		2、比如服务发现需要微服务启动时注册自己，链路跟踪需要在HTTP请求的headers中插入数据，流量控制需要一整套控制流量的逻辑等。这些入侵的代码需要在所有的微服务中保持一致。这导致了开发和管理上的一些难题。
	4、怎么解决 3中 微服务架构入侵
		为了解决这个问题，我们再次应用抽象和服务化的思想，将这些需要入侵的功能抽象出来，作为一个独立的服务。这个独立的服务被称为sidecar，这种模式叫sidecar模式。对每个微服务节点，都需要额外部署一个sidecar来负责业务逻辑外的公共功能。所有的出站入站的网络流量都会先经过sidecar进行各种处理或者转发。这样微服务的开发就不需要考虑业务逻辑外的问题。另外所有的sidecar都是一样的，只需要部署的时候使用合适的编排工具即可方便地为所有节点注入sidecar。

	5、基于sidecar的模式目前是service mesh最受欢迎的模式之一
		服务网格有如下几个特点：
			1、应用程序间通讯的中间层
			2、轻量级网络代理
			3、应用程序无感知
			4、解耦应用程序的重试/超时、监控、追踪和服务发现

		2、Sidecar不会产生额外网络成本。Sidecar会和微服务节点部署在同一台主机上并且共用相同的虚拟网卡。所以sidecar和微服务节点的通信实际上都只是通过内存拷贝实现的
		3、Sidecar只负责网络通信。还需要有个组件来统一管理所有sidecar的配置。在Service Mesh中，负责网络通信的部分叫数据平面（data plane），负责配置管理的部分叫控制平面（control plane）。数据平面和控制平面构成了Service Mesh的基本架构。


		3、service Mesh 架构和组件
			service Mesh 主要包括 数据平面 和 控制平面

			1、Istio的数据平面主要由Envoy实现。
			2、控制平面则主要由Istio的Pilot组件实现。
				控制平面部署了这几个组件（使用istio.yaml里写的名称）：
				1、etcd：分布式key-value存储。Istio的配置信息存在这里。
				2、istio-apiserver：实际上是一个kube-apiserver，提供了Kubernetes格式数据的读写接口。
				3、Consul：服务发现。
				4、Registrator：监听Docker服务进程，自动将容器注册到Consul。
				5、Pilot：从consul和istio-apiserver收集主机信息与配置数据，并下发到所有的sidecar。
				6、Zipkin：链路跟踪组件。与其他组件的关系相对独立。


			！！！ 控制平面最主要的功能
			使用Pilot-discovery将主机信息与配置数据同步到Envoy。pilot容器中实际执行的是pilot-discovery（发现服务）。它从consul收集各个主机的域名和IP的对应关系，从istio-apiserver获取流量控制配置，然后按照Envoy的xDS API规范生成Envoy配置，下发到所有sidecar

	6、Envoy介绍

	1、envoy 是什么
		1、Envoy 是专为大型现代 SOA（面向服务架构）架构设计的 L7 代理和通信总线，体积小，性能高
		2、Envoy 是一个独立进程，设计为伴随每个应用程序服务运行。所有的 Envoy 形成一个透明的通信网格，每个应用程序发送消息到本地主机或从本地主机接收消息，不需要知道网络拓扑，对服务的实现语言也完全无感知，这种模式也被称为 Sidecar。

	2、xDS是什么
		1、xDS是一类发现服务的总称，包含LDS， RDS， CDS， EDS以及SDS。

		2、Envoy通过xDS API可以动态获取Listener（监听器），Route（路由）， Cluster（集群）， Endpoint（集群成员）以及Secret（证书）配置。
		3、从而Envoy可以实现配置的完全动态化，配置实时更新而无需重启Envoy或者影响业务。此外，利用其L3/L4/L7 Filter机制，Envoy可以完全无侵入的扩展各种强大的功能。利用其内置的Tracing机制和Stats模块，可以很方便的实现对流量的跟踪以及监控，保证Envoy中流量的可观察性




	3、四层、七层负载均衡简介
		1、所谓四层就是基于 IP + 端口的负载均衡；七层就是基于 URL 等应用层信息的负载均衡；
			同理，还有基于 MAC 地址的二层负载均衡和基于 IP 地址的三层负载均衡。

		换句话说：
			二层负载均衡会通过一个虚拟 MAC 地址接收请求，然后再分配到真实的 MAC 地址；
			三层负载均衡会通过一个虚拟 IP 地址接收请求，然后再分配到真实的 IP 地址；
			四层通过虚拟 IP + 端口接收请求，然后再分配到真实的服务器；
			七层通过虚拟的 URL 或主机名接收请求，然后再分配到真实的服务器

		2、所谓的四到七层负载均衡，就是在对后台的服务器进行负载均衡时，依据四层的信息或七层的信息来决定怎么样转发流量

		比如四层的负载均衡，就是通过发布三层的 IP 地址（VIP），然后加四层的端口号，来决定哪些流量需要做负载均衡，
		对需要处理的流量进行 NAT 处理，转发至后台服务器，并记录下这个 TCP 或者 UDP 的流量是由哪台服务器处理的，
		后续这个连接的所有流量都同样转发到同一台服务器处理


		七层的负载均衡，就是在四层的基础上（没有四层是绝对不可能有七层的），再考虑应用层的特征， 比如同一个 Web 服务器的负载均衡，除了根据 VIP 加 80 端口辨别是否需要处理的流量， 还可根据七层的 URL、浏览器类别、语言来决定是否要进行负载均衡


