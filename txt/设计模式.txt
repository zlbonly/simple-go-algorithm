
参考链接：https://lailin.xyz/post/facade.html
1、单例模式

    单例设计模式（Singleton Design Pattern）理解起来非常简单。
    一个类只允许创建一个对象（或者实例），那这个类就是一个单例类，这种设计模式就叫作单例设计模式，简称单例模式。

    单例模式采用了 饿汉式 和 懒汉式 两种实现，个人其实更倾向于饿汉式的实现，简单，并且可以将问题及早暴露，
    懒汉式虽然支持延迟加载，但是这只是把冷启动时间放到了第一次使用的时候，
    并没有本质上解决问题，并且为了实现懒汉式还不可避免的需要加锁。

    a、饿汉式
        // Singleton 饿汉式单例
        type Singleton struct{}

        var singleton *Singleton

        func init() {
        	singleton = &Singleton{}
        }

        // GetInstance 获取实例
        func GetInstance() *Singleton {
        	return singleton
        }

    b、懒汉式（双重检测）
        import "sync"

        var (
        	lazySingleton *Singleton
        	once          = &sync.Once{}
        )

        // GetLazyInstance 懒汉式
        func GetLazyInstance() *Singleton {
        	if lazySingleton == nil {
        		once.Do(func() {
        			lazySingleton = &Singleton{}
        		})
        	}
        	return lazySingleton
        }

    补充：
        sync.Once 只暴露了一个方法 Do，你可以多次调用 Do 方法，但是只有第一次调用 Do 方法时 f 参数才会执行，这里的 f 是一个无参数无返回值的函数。
        为了防止多个goroutine调用 doSlow() 初始化资源时，造成资源多次初始化，因此采用 Mutex 锁机制来保证有且仅初始化一次
2、门面模式
    概念：门面模式，是指提供一个统一的接口去访问多个子系统的多个不同的接口，它为子系统中的一组接口提供一个统一的高层接口。使得子系统更容易使用。

    1、假设现在我有一个网站，以前有登录和注册的流程，登录的时候调用用户的查询接口，注册时调用用户的创建接口。
    为了简化用户的使用流程，我们现在提供直接验证码登录/注册的功能，如果该手机号已注册那么我们就走登录流程，如果该手机号未注册，那么我们就创建一个新的用户。

    // IUser 用户接口
    type IUser interface {
    	Login(phone int, code int) (*User, error)
    	Register(phone int, code int) (*User, error)
    }

    // IUserFacade 门面模式
    type IUserFacade interface {
    	LoginOrRegister(phone int, code int) error
    }

    // User 用户
    type User struct {
    	Name string
    }

    // UserService UserService
    type UserService struct {}

    // Login 登录
    func (u UserService) Login(phone int, code int) (*User, error) {
    	// 校验操作 ...
    	return &User{Name: "test login"}, nil
    }

    // Register 注册
    func (u UserService) Register(phone int, code int) (*User, error) {
    	// 校验操作 ...
    	// 创建用户
    	return &User{Name: "test register"}, nil
    }

    // LoginOrRegister 登录或注册
    func (u UserService)LoginOrRegister(phone int, code int) (*User, error) {
    	user, err := u.Login(phone, code)
    	if err != nil {
    		return nil, err
    	}

    	if user != nil {
    		return user, nil
    	}

    	return u.Register(phone, code)
    }


2、工厂模式
    简单工厂模式

    // IRuleConfigParser IRuleConfigParser
    type IRuleConfigParser interface {
    	Parse(data []byte)
    }

    // jsonRuleConfigParser jsonRuleConfigParser
    type jsonRuleConfigParser struct {
    }

    // Parse Parse
    func (J jsonRuleConfigParser) Parse(data []byte) {
    	panic("implement me")
    }

    // yamlRuleConfigParser yamlRuleConfigParser
    type yamlRuleConfigParser struct {
    }

    // Parse Parse
    func (Y yamlRuleConfigParser) Parse(data []byte) {
    	panic("implement me")
    }

    // NewIRuleConfigParser NewIRuleConfigParser
    func NewIRuleConfigParser(t string) IRuleConfigParser {
    	switch t {
    	case "json":
    		return jsonRuleConfigParser{}
    	case "yaml":
    		return yamlRuleConfigParser{}
    	}
    	return nil
    }


二、结构型
        3、laravel的门面模式
        为了让 Laravel 中的核心类使用起来更加方便，Laravel 实现了门面模式。
        在 Laravel 应用中，门面就是一个为容器中的对象提供访问方式的类。该机制的原理由 Facade 类实现。

        不管是 Laravel 自带的 Facades，还是用户自定义的 Facades ，都继承自 Illuminate\Support\Facades\Facade 类。
        门面类只需要实现一个方法：getFacadeAccessor。正是 getFacadeAccessor 方法定义了从容器中解析什么，然后 Facade 基类使用魔术方法 __callStatic() 从你的门面中调用解析对象。


        比如 ：DB，Redis，Log等静态类的加载

        补充：
        __call()
        　　　当对象访问不存在的方法时，__call()方法会被自动调用
        __callStatic()
        　　　当对象访问不存在的静态方法时，__callStatic()方法会被自动调用

        // IUser 用户接口
        type IUser interface {
        	Login(phone int, code int) (*User, error)
        	Register(phone int, code int) (*User, error)
        }

        // IUserFacade 门面模式
        type IUserFacade interface {
        	LoginOrRegister(phone int, code int) error
        }

        // User 用户
        type User struct {
        	Name string
        }

        // UserService UserService
        type UserService struct {}

        // Login 登录
        func (u UserService) Login(phone int, code int) (*User, error) {
        	// 校验操作 ...
        	return &User{Name: "test login"}, nil
        }

        // Register 注册
        func (u UserService) Register(phone int, code int) (*User, error) {
        	// 校验操作 ...
        	// 创建用户
        	return &User{Name: "test register"}, nil
        }

        // LoginOrRegister 登录或注册
        func (u UserService)LoginOrRegister(phone int, code int) (*User, error) {
        	user, err := u.Login(phone, code)
        	if err != nil {
        		return nil, err
        	}

        	if user != nil {
        		return user, nil
        	}

        	return u.Register(phone, code)
        }

   4、桥接模式
   桥接模式(Bridge Pattern)：将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式

   demo: 例如
    消息种类类型：邮件消息，短信消息
    消息通知类型：紧急消息，普通消息

    在实现时可以 将消息种类类型，作为参数传递给通知类型即可。

        type AbstractMessage interface {
        	SendMessage(text, to string)
        }

        type MessageImplementer interface {
        	Send(text, to string)
        }

        type MessageSMS struct{}

        func ViaSMS() MessageImplementer {
        	return &MessageSMS{}
        }

        func (*MessageSMS) Send(text, to string) {
        	fmt.Printf("send %s to %s via SMS", text, to)
        }

        type MessageEmail struct{}

        func ViaEmail() MessageImplementer {
        	return &MessageEmail{}
        }

        func (*MessageEmail) Send(text, to string) {
        	fmt.Printf("send %s to %s via Email", text, to)
        }

        type CommonMessage struct {
        	method MessageImplementer
        }

        func NewCommonMessage(method MessageImplementer) *CommonMessage {
        	return &CommonMessage{
        		method: method,
        	}
        }

        func (m *CommonMessage) SendMessage(text, to string) {
        	m.method.Send(text, to)
        }

        type UrgencyMessage struct {
        	method MessageImplementer
        }

        func NewUrgencyMessage(method MessageImplementer) *UrgencyMessage {
        	return &UrgencyMessage{
        		method: method,
        	}
        }

        func (m *UrgencyMessage) SendMessage(text, to string) {
        	m.method.Send(fmt.Sprintf("[Urgency] %s", text), to)
        }

        总结：在new对象的时候，通过new的方法以及new的参数方法，两种交叉确定后面的实现方法。然后通过公用定义的方法实现



三、行为
    5、策略模式
        策略模式作为一种软件设计模式，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。
        // StorageStrategy 存储策略
        type StorageStrategy interface {
        	Save(name string, data []byte) error
        }

        var strategys = map[string]StorageStrategy{
        	"file":         &fileStorage{},
        	"encrypt_file": &encryptFileStorage{},
        }

        // NewStorageStrategy NewStorageStrategy
        func NewStorageStrategy(t string) (StorageStrategy, error) {
        	s, ok := strategys[t]
        	if !ok {
        		return nil, fmt.Errorf("not found StorageStrategy: %s", t)
        	}

        	return s, nil
        }

        // FileStorage 保存到文件
        type fileStorage struct{}

        // Save Save
        func (s *fileStorage) Save(name string, data []byte) error {
        	return ioutil.WriteFile(name, data, os.ModeAppend)
        }

        // encryptFileStorage 加密保存到文件
        type encryptFileStorage struct{}

        // Save Save
        func (s *encryptFileStorage) Save(name string, data []byte) error {
        	// 加密
        	data, err := encrypt(data)
        	if err != nil {
        		return err
        	}

        	return ioutil.WriteFile(name, data, os.ModeAppend)
        }

        func encrypt(data []byte) ([]byte, error) {
        	// 这里实现加密算法
        	return data, nil
        }


        策略模式和简单工厂模式的结合使用：
        充值中 根据 传入参数实力化不同的充值网关类，然后配合策略模式，定义策略接口和行为方法，对每种充值方法
        实现具体的下单和充值行为

       策略模式和工厂模式的区别
        1、从类型上说:简单工厂模式属于创建型模式,而策略模式属于行为型模式。
        2、用途不一样
            工厂是创建型模式,它的作用就是创建对象；
            策略是行为型模式,它的作用是让一个对象在许多行为中选择一种行为;
        3、关注点不一样
         一个关注对象创建
         一个关注行为的封装